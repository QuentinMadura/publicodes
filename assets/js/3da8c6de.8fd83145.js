"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[726],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6720:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(5773),i=(n(7378),n(5318));const a={sidebar_position:2,title:"Cr\xe9er des tests unitaires"},s=void 0,o={unversionedId:"guides/jeux-de-tests",id:"guides/jeux-de-tests",title:"Cr\xe9er des tests unitaires",description:"Un des avantages des algorithmes publi.codes est qu'ils permettent d'isoler la logique m\xe9tier du reste de votre application, ce qui les rend testables facilement.",source:"@site/docs/guides/jeux-de-tests.mdx",sourceDirName:"guides",slug:"/guides/jeux-de-tests",permalink:"/docs/guides/jeux-de-tests",draft:!1,editUrl:"https://github.com/betagouv/publicodes/edit/master/website/docs/guides/jeux-de-tests.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Cr\xe9er des tests unitaires"},sidebar:"tutorialSidebar",previous:{title:"Cr\xe9er un paquet de r\xe8gles r\xe9utilisable",permalink:"/docs/guides/model-template"},next:{title:"Afficher la documentation avec NextJS",permalink:"/docs/guides/nextJS"}},l={},u=[{value:"Impl\xe9mentation",id:"impl\xe9mentation",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Un des avantages des algorithmes publi.codes est qu'ils permettent d'isoler la logique m\xe9tier du reste de votre application, ce qui les rend testables facilement."),(0,i.kt)("p",null,"Dans l'exemple suivant on va tester unitairement avec ",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/fr"},(0,i.kt)("inlineCode",{parentName:"a"},"jest"))," un algorithme publi.codes."),(0,i.kt)("h2",{id:"impl\xe9mentation"},"Impl\xe9mentation"),(0,i.kt)("p",null,"Ajouter ",(0,i.kt)("inlineCode",{parentName:"p"},"jest")," dans vos devDependencies"),(0,i.kt)("p",null,"L'algorithme :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"taille:\n  question: Quelle est votre taille (en cm) ?\n  unit\xe9: cm\n\npoids:\n  question: Quel est votre poids (en kg) ?\n  unit\xe9: kg\n\n# Convertit la taille en m\xe8tres\ntaille m\xe8tres:\n  valeur: taille\n  unit\xe9: m\n\n# Calcul l'IMC \xe0 partir de la taille en m\xe8tres\nimc:\n  valeur: poids / ((taille m\xe8tres) * (taille m\xe8tres))\n  unit\xe9: kg / m\xb2\n\n# Affiche le r\xe9sultat\nr\xe9sultat:\n  applicable si: imc\n  texte: |\n    Votre IMC est de {{ imc }}\n    Interpr\xe9tation: {{ r\xe9sultat . interpretation }}\n\n# Interpr\xe9tations de l'IMC\nr\xe9sultat . interpretation:\n  variations:\n    - si: imc >= 40\n      alors: \"'ob\xe9sit\xe9 morbide ou massive'\"\n    - si: imc >= 35\n      alors: \"'ob\xe9sit\xe9 s\xe9v\xe8re'\"\n    - si: imc >= 30\n      alors: \"'ob\xe9sit\xe9 mod\xe9r\xe9e'\"\n    - si: imc >= 25\n      alors: \"'surpoids'\"\n    - si: imc >= 18.5\n      alors: \"'poids normal'\"\n    - si: imc >= 16.5\n      alors: \"'maigreur'\"\n    - sinon: \"'d\xe9nutrition'\"\n")),(0,i.kt)("p",null,"Les tests, \xe0 placer dans un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"*.test.ts")," pr\xe8s de votre algorithme :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import rules from './modele.json'\nimport Engine from 'publicodes'\n\ntest('doit renvoyer le bon IMC pour T=170,P=80)', () => {\n    const engine = new Engine(rules)\n    engine.setSituation({\n        poids: '80kg',\n        taille: '170cm',\n    })\n    const evaluated = engine.evaluate('imc')\n    // teste la valeur brute\n    expect(evaluated.nodeValue).toEqual(27.68166089965398)\n    // teste la valeur format\xe9e\n    expect(formatValue(evaluated)).toEqual('27,68\\u00A0kg / m\xb2')\n})\n\ntest('doit renvoyer la bonne interpretation pour T=150,P=90)', () => {\n    const engine = new Engine(rules)\n    engine.setSituation({\n        poids: '90kg',\n        taille: '150cm',\n    })\n    const evaluated = engine.evaluate('r\xe9sultat')\n    expect(evaluated.nodeValue.trim()).toEqual(\n        // le caract\xe8re `\\u00A0` est un espace insecable ins\xe9r\xe9 par publi.codes lors du formatage d'unit\xe9\n        `Votre IMC est de 40\\u00A0kg / m\xb2\\nInterpr\xe9tation: ob\xe9sit\xe9 morbide ou massive`\n    )\n})\n")),(0,i.kt)("p",null,"Lancer ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn jest")," et int\xe9grez ces tests ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/betagouv/publicodes/blob/3161e4017970a77f8a793fc0bb614643b28b758e/.github/workflows/test.yaml#L12"},"dans votre int\xe9gration-continue")," pour d\xe9t\xe9cter d'\xe9ventuelles regressions."),(0,i.kt)("p",null,"Tip: Utiliser ",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/fr/docs/api#testeachtablename-fn-timeout"},(0,i.kt)("inlineCode",{parentName:"a"},"test.each"))," pour cr\xe9er des tableaux de tests."))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=3da8c6de.8fd83145.js.map